import { Update, Ctx, Start, Help, On, Hears, Command, InjectBot, Action } from 'nestjs-telegraf';
import { Telegraf, Context } from 'telegraf';
import { Injectable, Logger } from '@nestjs/common';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–µ—Å—Å–∏–∏
interface SessionData {
	messageCount: number;
	lastActivity: Date;
}

// –†–∞—Å—à–∏—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Context
interface BotContext extends Context {
	session?: SessionData;
}

@Update()
@Injectable()
export class TelegramUpdate {
	private readonly logger = new Logger(TelegramUpdate.name);

	constructor(@InjectBot() private readonly bot: Telegraf<Context>) {}

	@Start()
	async startCommand(@Ctx() ctx: BotContext) {
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
		ctx.session = {
			messageCount: 0,
			lastActivity: new Date(),
		};

		const welcomeText = `ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${ctx.from?.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

–Ø VVIkonBot, –ü—Ä–∏–≤–µ—Ç

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–º–æ—â—å
/profile - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å
/keyboard - –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
/echo [—Ç–µ–∫—Å—Ç] - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç
/inline - –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏`;

		await ctx.reply(welcomeText);
		this.logger.log(`User ${ctx.from?.id} started the bot`);
	}

	@Help()
	async helpCommand(@Ctx() ctx: BotContext) {
		const helpText = `üìã –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/profile - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–π —Å–µ—Å—Å–∏–∏
/echo [—Ç–µ–∫—Å—Ç] - –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –≤–∞—à —Ç–µ–∫—Å—Ç
/keyboard - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/inline - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏

–î–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /feedback`;

		await ctx.reply(helpText);
	}

	@Command('profile')
	async profileCommand(@Ctx() ctx: BotContext) {
		const user = ctx.from;

		if (!user) {
			await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
			return;
		}

		const profileText = `üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ:

ID: ${user.id}
–ò–º—è: ${user.first_name}
–§–∞–º–∏–ª–∏—è: ${user.last_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
Username: ${user.username ? `@${user.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω'}
–Ø–∑—ã–∫: ${user.language_code || '–ù–µ —É–∫–∞–∑–∞–Ω'}`;

		await ctx.reply(profileText);
	}

	@Command('stats')
	async statsCommand(@Ctx() ctx: BotContext) {
		if (!ctx.session) {
			ctx.session = { messageCount: 0, lastActivity: new Date() };
		}

		const statsText = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:

–°–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏: ${ctx.session.messageCount}
–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${ctx.session.lastActivity.toLocaleString('ru-RU')}
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: ${Math.floor((new Date().getTime() - ctx.session.lastActivity.getTime()) / 1000)} —Å–µ–∫.`;

		await ctx.reply(statsText);
	}

	@Command('echo')
	async echoCommand(@Ctx() ctx: BotContext) {
		const text = ctx.message && 'text' in ctx.message ? ctx.message.text.split(' ').slice(1).join(' ') : '';

		if (!text) {
			await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: /echo –≤–∞—à —Ç–µ–∫—Å—Ç');
			return;
		}

		await ctx.reply(`üîÅ –í—ã —Å–∫–∞–∑–∞–ª–∏: "${text}"`);
	}

	@Command('keyboard')
	async keyboardCommand(@Ctx() ctx: BotContext) {
		const keyboard = {
			reply_markup: {
				keyboard: [
					[{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' }, { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å' }],
					[{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å' }, { text: '‚ùì –ü–æ–º–æ—â—å' }],
					[{ text: 'üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è' }],
				],
				resize_keyboard: true,
				one_time_keyboard: false,
			},
		};

		await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
	}

	@Command('inline')
	async inlineCommand(@Ctx() ctx: BotContext) {
		const keyboard = {
			reply_markup: {
				inline_keyboard: [
					[
						{ text: 'GitHub', url: 'https://github.com' },
						{ text: 'NestJS Docs', url: 'https://docs.nestjs.com' },
					],
					[
						{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'confirm' },
						{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel' },
					],
					[{ text: 'üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data: 'get_stats' }],
				],
			},
		};

		await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
	}

	@Hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
	async hearsStats(@Ctx() ctx: BotContext) {
		await this.statsCommand(ctx);
	}

	@Hears('üë§ –ü—Ä–æ—Ñ–∏–ª—å')
	async hearsProfile(@Ctx() ctx: BotContext) {
		await this.profileCommand(ctx);
	}

	@Hears('üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è')
	async hearsDateTime(@Ctx() ctx: BotContext) {
		const now = new Date();
		await ctx.reply(`üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now.toLocaleString('ru-RU')}`);
	}

	@Hears('üîÑ –û–±–Ω–æ–≤–∏—Ç—å')
	async hearsRefresh(@Ctx() ctx: BotContext) {
		await ctx.reply('‚ôªÔ∏è –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
	}

	@Action('confirm')
	async confirmAction(@Ctx() ctx: BotContext) {
		await ctx.answerCbQuery();
		await ctx.editMessageText('‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!');
	}

	@Action('cancel')
	async cancelAction(@Ctx() ctx: BotContext) {
		await ctx.answerCbQuery();
		await ctx.editMessageText('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!');
	}

	@Action('get_stats')
	async getStatsAction(@Ctx() ctx: BotContext) {
		await ctx.answerCbQuery();

		if (ctx.session) {
			const stats = `üìà –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
–°–æ–æ–±—â–µ–Ω–∏–π: ${ctx.session.messageCount}
–ê–∫—Ç–∏–≤–µ–Ω —Å: ${ctx.session.lastActivity.toLocaleTimeString('ru-RU')}`;

			await ctx.editMessageText(stats);
		} else {
			await ctx.editMessageText('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.');
		}
	}

	@On('text')
	async onText(@Ctx() ctx: BotContext) {
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
		if (ctx.session) {
			ctx.session.messageCount = (ctx.session.messageCount || 0) + 1;
			ctx.session.lastActivity = new Date();
		} else {
			ctx.session = {
				messageCount: 1,
				lastActivity: new Date(),
			};
		}

		this.logger.log(
			`Received text message from ${ctx.from?.id}: ${ctx.message && 'text' in ctx.message ? ctx.message.text : 'unknown'}`,
		);
	}

	@On('message')
	async onMessage(@Ctx() ctx: BotContext) {
		if (ctx.message && 'text' in ctx.message) {
			return; // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ onText
		}

		await ctx.reply('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –ü–æ–∫–∞ —è –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üòä');
	}
}
